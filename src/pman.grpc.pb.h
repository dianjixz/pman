// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pman.proto
#ifndef GRPC_pman_2eproto__INCLUDED
#define GRPC_pman_2eproto__INCLUDED

#include "pman.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pman {

class Pman final {
 public:
  static constexpr char const* service_full_name() {
    return "pman.Pman";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>> ProgramStatus(::grpc::ClientContext* context, const ::pman::StatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>>(ProgramStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>> AsyncProgramStatus(::grpc::ClientContext* context, const ::pman::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>>(AsyncProgramStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>> PrepareAsyncProgramStatus(::grpc::ClientContext* context, const ::pman::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>>(PrepareAsyncProgramStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>> StartProgram(::grpc::ClientContext* context, const ::pman::StartRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>>(StartProgramRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>> AsyncStartProgram(::grpc::ClientContext* context, const ::pman::StartRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>>(AsyncStartProgramRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>> PrepareAsyncStartProgram(::grpc::ClientContext* context, const ::pman::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>>(PrepareAsyncStartProgramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>> StopProgram(::grpc::ClientContext* context, const ::pman::StopRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>>(StopProgramRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>> AsyncStopProgram(::grpc::ClientContext* context, const ::pman::StopRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>>(AsyncStopProgramRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>> PrepareAsyncStopProgram(::grpc::ClientContext* context, const ::pman::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>>(PrepareAsyncStopProgramRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>* ProgramStatusRaw(::grpc::ClientContext* context, const ::pman::StatusRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>* AsyncProgramStatusRaw(::grpc::ClientContext* context, const ::pman::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>* PrepareAsyncProgramStatusRaw(::grpc::ClientContext* context, const ::pman::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>* StartProgramRaw(::grpc::ClientContext* context, const ::pman::StartRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>* AsyncStartProgramRaw(::grpc::ClientContext* context, const ::pman::StartRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>* PrepareAsyncStartProgramRaw(::grpc::ClientContext* context, const ::pman::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pman::ProgramStatusReply>* StopProgramRaw(::grpc::ClientContext* context, const ::pman::StopRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>* AsyncStopProgramRaw(::grpc::ClientContext* context, const ::pman::StopRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pman::ProgramStatusReply>* PrepareAsyncStopProgramRaw(::grpc::ClientContext* context, const ::pman::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::pman::ProgramStatusReply>> ProgramStatus(::grpc::ClientContext* context, const ::pman::StatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pman::ProgramStatusReply>>(ProgramStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>> AsyncProgramStatus(::grpc::ClientContext* context, const ::pman::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>>(AsyncProgramStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>> PrepareAsyncProgramStatus(::grpc::ClientContext* context, const ::pman::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>>(PrepareAsyncProgramStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pman::ProgramStatusReply>> StartProgram(::grpc::ClientContext* context, const ::pman::StartRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pman::ProgramStatusReply>>(StartProgramRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>> AsyncStartProgram(::grpc::ClientContext* context, const ::pman::StartRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>>(AsyncStartProgramRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>> PrepareAsyncStartProgram(::grpc::ClientContext* context, const ::pman::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>>(PrepareAsyncStartProgramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pman::ProgramStatusReply>> StopProgram(::grpc::ClientContext* context, const ::pman::StopRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pman::ProgramStatusReply>>(StopProgramRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>> AsyncStopProgram(::grpc::ClientContext* context, const ::pman::StopRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>>(AsyncStopProgramRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>> PrepareAsyncStopProgram(::grpc::ClientContext* context, const ::pman::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>>(PrepareAsyncStopProgramRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::pman::ProgramStatusReply>* ProgramStatusRaw(::grpc::ClientContext* context, const ::pman::StatusRequest& request) override;
    ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>* AsyncProgramStatusRaw(::grpc::ClientContext* context, const ::pman::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>* PrepareAsyncProgramStatusRaw(::grpc::ClientContext* context, const ::pman::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pman::ProgramStatusReply>* StartProgramRaw(::grpc::ClientContext* context, const ::pman::StartRequest& request) override;
    ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>* AsyncStartProgramRaw(::grpc::ClientContext* context, const ::pman::StartRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>* PrepareAsyncStartProgramRaw(::grpc::ClientContext* context, const ::pman::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pman::ProgramStatusReply>* StopProgramRaw(::grpc::ClientContext* context, const ::pman::StopRequest& request) override;
    ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>* AsyncStopProgramRaw(::grpc::ClientContext* context, const ::pman::StopRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pman::ProgramStatusReply>* PrepareAsyncStopProgramRaw(::grpc::ClientContext* context, const ::pman::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProgramStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_StartProgram_;
    const ::grpc::internal::RpcMethod rpcmethod_StopProgram_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ProgramStatus(::grpc::ServerContext* context, const ::pman::StatusRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer);
    virtual ::grpc::Status StartProgram(::grpc::ServerContext* context, const ::pman::StartRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer);
    virtual ::grpc::Status StopProgram(::grpc::ServerContext* context, const ::pman::StopRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProgramStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ProgramStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProgramStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProgramStatus(::grpc::ServerContext* context, const ::pman::StatusRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProgramStatus(::grpc::ServerContext* context, ::pman::StatusRequest* request, ::grpc::ServerAsyncWriter< ::pman::ProgramStatusReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartProgram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartProgram() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StartProgram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProgram(::grpc::ServerContext* context, const ::pman::StartRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartProgram(::grpc::ServerContext* context, ::pman::StartRequest* request, ::grpc::ServerAsyncWriter< ::pman::ProgramStatusReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopProgram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopProgram() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StopProgram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopProgram(::grpc::ServerContext* context, const ::pman::StopRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopProgram(::grpc::ServerContext* context, ::pman::StopRequest* request, ::grpc::ServerAsyncWriter< ::pman::ProgramStatusReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProgramStatus<WithAsyncMethod_StartProgram<WithAsyncMethod_StopProgram<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ProgramStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ProgramStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProgramStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProgramStatus(::grpc::ServerContext* context, const ::pman::StatusRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartProgram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartProgram() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StartProgram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProgram(::grpc::ServerContext* context, const ::pman::StartRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopProgram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopProgram() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StopProgram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopProgram(::grpc::ServerContext* context, const ::pman::StopRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProgramStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ProgramStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProgramStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProgramStatus(::grpc::ServerContext* context, const ::pman::StatusRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProgramStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartProgram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StartProgram() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StartProgram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProgram(::grpc::ServerContext* context, const ::pman::StartRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartProgram(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopProgram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StopProgram() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StopProgram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopProgram(::grpc::ServerContext* context, const ::pman::StopRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopProgram(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ProgramStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ProgramStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::pman::StatusRequest, ::pman::ProgramStatusReply>(std::bind(&WithSplitStreamingMethod_ProgramStatus<BaseClass>::StreamedProgramStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ProgramStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProgramStatus(::grpc::ServerContext* context, const ::pman::StatusRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedProgramStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pman::StatusRequest,::pman::ProgramStatusReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StartProgram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_StartProgram() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::pman::StartRequest, ::pman::ProgramStatusReply>(std::bind(&WithSplitStreamingMethod_StartProgram<BaseClass>::StreamedStartProgram, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_StartProgram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartProgram(::grpc::ServerContext* context, const ::pman::StartRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStartProgram(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pman::StartRequest,::pman::ProgramStatusReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StopProgram : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_StopProgram() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::pman::StopRequest, ::pman::ProgramStatusReply>(std::bind(&WithSplitStreamingMethod_StopProgram<BaseClass>::StreamedStopProgram, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_StopProgram() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopProgram(::grpc::ServerContext* context, const ::pman::StopRequest* request, ::grpc::ServerWriter< ::pman::ProgramStatusReply>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStopProgram(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pman::StopRequest,::pman::ProgramStatusReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ProgramStatus<WithSplitStreamingMethod_StartProgram<WithSplitStreamingMethod_StopProgram<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ProgramStatus<WithSplitStreamingMethod_StartProgram<WithSplitStreamingMethod_StopProgram<Service > > > StreamedService;
};

}  // namespace pman


#endif  // GRPC_pman_2eproto__INCLUDED

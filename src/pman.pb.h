// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pman.proto

#ifndef PROTOBUF_INCLUDED_pman_2eproto
#define PROTOBUF_INCLUDED_pman_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pman_2eproto 

namespace protobuf_pman_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pman_2eproto
namespace pman {
class ProgramStatusReply;
class ProgramStatusReplyDefaultTypeInternal;
extern ProgramStatusReplyDefaultTypeInternal _ProgramStatusReply_default_instance_;
class StartRequest;
class StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
}  // namespace pman
namespace google {
namespace protobuf {
template<> ::pman::ProgramStatusReply* Arena::CreateMaybeMessage<::pman::ProgramStatusReply>(Arena*);
template<> ::pman::StartRequest* Arena::CreateMaybeMessage<::pman::StartRequest>(Arena*);
template<> ::pman::StatusRequest* Arena::CreateMaybeMessage<::pman::StatusRequest>(Arena*);
template<> ::pman::StopRequest* Arena::CreateMaybeMessage<::pman::StopRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pman {

enum ProgramStatusReply_Status {
  ProgramStatusReply_Status_STOPPING = 0,
  ProgramStatusReply_Status_RUNNING = 1,
  ProgramStatusReply_Status_ProgramStatusReply_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProgramStatusReply_Status_ProgramStatusReply_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProgramStatusReply_Status_IsValid(int value);
const ProgramStatusReply_Status ProgramStatusReply_Status_Status_MIN = ProgramStatusReply_Status_STOPPING;
const ProgramStatusReply_Status ProgramStatusReply_Status_Status_MAX = ProgramStatusReply_Status_RUNNING;
const int ProgramStatusReply_Status_Status_ARRAYSIZE = ProgramStatusReply_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProgramStatusReply_Status_descriptor();
inline const ::std::string& ProgramStatusReply_Status_Name(ProgramStatusReply_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProgramStatusReply_Status_descriptor(), value);
}
inline bool ProgramStatusReply_Status_Parse(
    const ::std::string& name, ProgramStatusReply_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProgramStatusReply_Status>(
    ProgramStatusReply_Status_descriptor(), name, value);
}
// ===================================================================

class StatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pman.StatusRequest) */ {
 public:
  StatusRequest();
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StatusRequest* other);
  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(NULL);
  }

  StatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pman.StatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pman.StartRequest) */ {
 public:
  StartRequest();
  virtual ~StartRequest();

  StartRequest(const StartRequest& from);

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StartRequest* other);
  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return CreateMaybeMessage<StartRequest>(NULL);
  }

  StartRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartRequest& from);
  void MergeFrom(const StartRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pman.StartRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pman.StopRequest) */ {
 public:
  StopRequest();
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StopRequest* other);
  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(NULL);
  }

  StopRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pman.StopRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pman_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProgramStatusReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pman.ProgramStatusReply) */ {
 public:
  ProgramStatusReply();
  virtual ~ProgramStatusReply();

  ProgramStatusReply(const ProgramStatusReply& from);

  inline ProgramStatusReply& operator=(const ProgramStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProgramStatusReply(ProgramStatusReply&& from) noexcept
    : ProgramStatusReply() {
    *this = ::std::move(from);
  }

  inline ProgramStatusReply& operator=(ProgramStatusReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramStatusReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramStatusReply* internal_default_instance() {
    return reinterpret_cast<const ProgramStatusReply*>(
               &_ProgramStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProgramStatusReply* other);
  friend void swap(ProgramStatusReply& a, ProgramStatusReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgramStatusReply* New() const final {
    return CreateMaybeMessage<ProgramStatusReply>(NULL);
  }

  ProgramStatusReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProgramStatusReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProgramStatusReply& from);
  void MergeFrom(const ProgramStatusReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramStatusReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProgramStatusReply_Status Status;
  static const Status STOPPING =
    ProgramStatusReply_Status_STOPPING;
  static const Status RUNNING =
    ProgramStatusReply_Status_RUNNING;
  static inline bool Status_IsValid(int value) {
    return ProgramStatusReply_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ProgramStatusReply_Status_Status_MIN;
  static const Status Status_MAX =
    ProgramStatusReply_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ProgramStatusReply_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ProgramStatusReply_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ProgramStatusReply_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ProgramStatusReply_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .pman.ProgramStatusReply.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::pman::ProgramStatusReply_Status status() const;
  void set_status(::pman::ProgramStatusReply_Status value);

  // @@protoc_insertion_point(class_scope:pman.ProgramStatusReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pman_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusRequest

// string name = 1;
inline void StatusRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusRequest::name() const {
  // @@protoc_insertion_point(field_get:pman.StatusRequest.name)
  return name_.GetNoArena();
}
inline void StatusRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pman.StatusRequest.name)
}
#if LANG_CXX11
inline void StatusRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pman.StatusRequest.name)
}
#endif
inline void StatusRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pman.StatusRequest.name)
}
inline void StatusRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pman.StatusRequest.name)
}
inline ::std::string* StatusRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pman.StatusRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusRequest::release_name() {
  // @@protoc_insertion_point(field_release:pman.StatusRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pman.StatusRequest.name)
}

// -------------------------------------------------------------------

// StartRequest

// string name = 1;
inline void StartRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartRequest::name() const {
  // @@protoc_insertion_point(field_get:pman.StartRequest.name)
  return name_.GetNoArena();
}
inline void StartRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pman.StartRequest.name)
}
#if LANG_CXX11
inline void StartRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pman.StartRequest.name)
}
#endif
inline void StartRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pman.StartRequest.name)
}
inline void StartRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pman.StartRequest.name)
}
inline ::std::string* StartRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pman.StartRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartRequest::release_name() {
  // @@protoc_insertion_point(field_release:pman.StartRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pman.StartRequest.name)
}

// -------------------------------------------------------------------

// StopRequest

// string name = 1;
inline void StopRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopRequest::name() const {
  // @@protoc_insertion_point(field_get:pman.StopRequest.name)
  return name_.GetNoArena();
}
inline void StopRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pman.StopRequest.name)
}
#if LANG_CXX11
inline void StopRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pman.StopRequest.name)
}
#endif
inline void StopRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pman.StopRequest.name)
}
inline void StopRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pman.StopRequest.name)
}
inline ::std::string* StopRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pman.StopRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopRequest::release_name() {
  // @@protoc_insertion_point(field_release:pman.StopRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pman.StopRequest.name)
}

// -------------------------------------------------------------------

// ProgramStatusReply

// string name = 1;
inline void ProgramStatusReply::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProgramStatusReply::name() const {
  // @@protoc_insertion_point(field_get:pman.ProgramStatusReply.name)
  return name_.GetNoArena();
}
inline void ProgramStatusReply::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pman.ProgramStatusReply.name)
}
#if LANG_CXX11
inline void ProgramStatusReply::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pman.ProgramStatusReply.name)
}
#endif
inline void ProgramStatusReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pman.ProgramStatusReply.name)
}
inline void ProgramStatusReply::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pman.ProgramStatusReply.name)
}
inline ::std::string* ProgramStatusReply::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pman.ProgramStatusReply.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProgramStatusReply::release_name() {
  // @@protoc_insertion_point(field_release:pman.ProgramStatusReply.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProgramStatusReply::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pman.ProgramStatusReply.name)
}

// .pman.ProgramStatusReply.Status status = 2;
inline void ProgramStatusReply::clear_status() {
  status_ = 0;
}
inline ::pman::ProgramStatusReply_Status ProgramStatusReply::status() const {
  // @@protoc_insertion_point(field_get:pman.ProgramStatusReply.status)
  return static_cast< ::pman::ProgramStatusReply_Status >(status_);
}
inline void ProgramStatusReply::set_status(::pman::ProgramStatusReply_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:pman.ProgramStatusReply.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pman

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pman::ProgramStatusReply_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pman::ProgramStatusReply_Status>() {
  return ::pman::ProgramStatusReply_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pman_2eproto
